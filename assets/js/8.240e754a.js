(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{353:function(t,s,a){"use strict";a.r(s);var e=a(42),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git学习"}},[t._v("#")]),t._v(" Git学习")]),t._v(" "),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/6/25/172ea48acc9e10d9?imageslim"}}),t._v(" "),a("h3",{attrs:{id:"保存临时工作成果stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保存临时工作成果stash"}},[t._v("#")]),t._v(" 保存临时工作成果Stash")]),t._v(" "),a("h4",{attrs:{id:"git-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),a("h4",{attrs:{id:"git-stash-pop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-pop"}},[t._v("#")]),t._v(" git stash pop")]),t._v(" "),a("p",[t._v("在你需要并行做好几件事的时候，\n比如你正在开发一个功能程序开发到一半，\n有一个紧急的bug需要处理又或者你突然对另外一个新特性来了思路，\n但是你现有的代码还在一个中间状态甚至编译都有问题。\n你需要可定需要一个功能保存现在的工作现场，然后去干另外一件事。\n这个时候stash功能就可以帮助你解决")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"版本回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("h4",{attrs:{id:"git-reset（-mixed）-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset（-mixed）-head"}},[t._v("#")]),t._v(" git reset（--mixed） HEAD^")]),t._v(" "),a("p",[t._v("只是版本回退 不更新工作区，difference 不会在暂存区，需要手动add")]),t._v(" "),a("h4",{attrs:{id:"git-reset-hard-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-hard-head"}},[t._v("#")]),t._v(" git reset --hard HEAD^")]),t._v(" "),a("p",[t._v("不但版本回退 也会更新工作区（文件目录）的文件到上一个版本")]),t._v(" "),a("h4",{attrs:{id:"git-reset-soft-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-soft-head"}},[t._v("#")]),t._v(" git reset --soft HEAD^")]),t._v(" "),a("p",[t._v("工作区文件不会有变化，difference 会在暂存区等待提交")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"清洗提交历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清洗提交历史"}},[t._v("#")]),t._v(" 清洗提交历史")]),t._v(" "),a("h4",{attrs:{id:"git-merge-squash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-squash"}},[t._v("#")]),t._v(" git merge --squash")]),t._v(" "),a("p",[t._v("希望通过一次的commit来保留中间成果，最终提交的时候不希望中间细节被被人了解。\n该操作是把合并分支的最终代码暂存到缓存区，通过在master主分支上进行一次commit提交来实现效果。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"改变分支依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改变分支依赖"}},[t._v("#")]),t._v(" 改变分支依赖")]),t._v(" "),a("h4",{attrs:{id:"git-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),a("p",[t._v("合并多次提交记录 git rebase -i HEAD~4")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("p, pick = use commit\nr, reword = use commit, but edit the commit message\ne, edit = use commit, but stop for amending\ns, squash = use commit, but meld into previous commit\nf, fixup = like “squash”, but discard this commit’s log message\nx, exec = run command (the rest of the line) using shell\nd, drop = remove commit\n")])])]),a("ul",[a("li",[t._v("本地与远端同一分支提交历史不一致")]),t._v(" "),a("li",[t._v("不同分支之间的合并\n"),a("br"),a("code",[t._v("https://www.jianshu.com/p/f7ed3dd0d2d8")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);